/*
 * This Java source file was generated by the Gradle 'init' task.
 */
 package eStoreSearch;

 import org.junit.Test;
 import static org.junit.Assert.*;
 import java.util.ArrayList;
 import java.util.HashMap;

 public class EStoreSearchTest {
     @Test public void testAddingProducts(){
       ArrayList<Product> listofproducts = new ArrayList<Product>();
       try{
       Product newBook = new Book("111111" , "The red book; Liber Novus" , "100.01","2012" , "Carl Jung","Pearson publishing");
       listofproducts.add(newBook);
       }
       catch (Exception e){
         fail("Exception was thrown for correct book");
       }
       assertEquals("111111", listofproducts.get(0).getProductID());
       assertEquals("The red book; Liber Novus", listofproducts.get(0).getDescription());
       assertEquals("2012", listofproducts.get(0).getYear());
       assertEquals("100.01", listofproducts.get(0).getPrice());
       assertEquals("Carl Jung", ((Book)listofproducts.get(0)).getAuthor());
       assertEquals("Pearson publishing", ((Book)listofproducts.get(0)).getPublisher());
       try{
         Product newElectronic = new Electronic("000000" , "IPOD" , "50.54","2014" , "apple. INC");
       listofproducts.add(newElectronic);
       }
       catch (Exception e){
         fail("Exception was thrown for correct book");
       }
       assertEquals("000000", listofproducts.get(1).getProductID());
       assertEquals("IPOD", listofproducts.get(1).getDescription());
       assertEquals("2014", listofproducts.get(1).getYear());
       assertEquals("50.54", listofproducts.get(1).getPrice());
       assertEquals("apple. INC", ((Electronic)listofproducts.get(1)).getMaker());
     }
     @Test public void testIDValidity(){
       EStoreSearch testProgram = new EStoreSearch();


       ArrayList<Product> listofproducts = new ArrayList<Product>();
       try{
         listofproducts.add(new Book ("000000", "test" ,"40","2000","me","publisher"));
         listofproducts.add(new Electronic ("000001", "test" ,"40","2000","apple"));
       }
       catch (Exception e){
         fail("Exception was thrown for correct book");
       }

       //Below will be the failed tests.
       try{ //this tries to make a new book with the ID too long
         Product book = new Book("1111111","book","1001","1001","","");
         fail("No exception was thrown"); //if it gets to here, no exception was thrown. It should throw
       }                                  // an exception, so we make it fail if none was thrown
       catch (Exception e){  //if it catches an exception that is a pass, as we want an exception for this invalid ID
       }
       try{ //it is the same format for all failed additions for ID
         Product book = new Book("111","book","1001","1001","","");
         fail("No exception was thrown");
       }
       catch (Exception e){
       }
       try{
         Product book = new Book("111aaa","book","1001","1001","","");
         fail("No exception was thrown");
       }
       catch (Exception e){
       }

       //Below will a passing test
       try{ //now if a valid ID is tried to be entered, it should not throw any exception
         Product book = new Book("999999","book","1001","1001","","");
       }
       catch (Exception e){ //so in the success cases, we check for an exceptiona and if it does throw one
         fail("exception was thrown"); //then it is a fail
       }
       try{
         Product book = new Book("123456","book","1001","1001","","");
       }
       catch (Exception e){
         fail("exception was thrown");
       }

     }
     @Test public void testYearValidity(){
       EStoreSearch testProgram = new EStoreSearch();
       //Below will be the failed tests.
       try{ //this tries to make a new book with tyear too large
         Product book = new Book("000000","book","1001","100000","","");
         fail("No exception was thrown"); //if it gets to here, no exception was thrown. It should throw
       }                                  // an exception, so we make it fail if none was thrown
       catch (Exception e){  //if it catches an exception that is a pass, as we want an exception for this invalid year
       }
       try{ //this tries to make a new book with tyear too small
         Product book = new Book("000000","book","1001","999","","");
         fail("No exception was thrown"); //if it gets to here, no exception was thrown. It should throw
       }                                  // an exception, so we make it fail if none was thrown
       catch (Exception e){  //if it catches an exception that is a pass, as we want an exception for this invalid year
       }
       try{ //this tries to make a new book with year as a non integer
         Product book = new Book("000000","book","1001","aaa","","");
         fail("No exception was thrown"); //if it gets to here, no exception was thrown. It should throw
       }                                  // an exception, so we make it fail if none was thrown
       catch (Exception e){  //if it catches an exception that is a pass, as we want an exception for this invalid year
       }
       //Below will be the passing tests
       try{
         Product book = new Book("123456","book","1001","9999","","");
       }
       catch (Exception e){
         fail("exception was thrown");
       }
       try{
         Product book = new Book("123456","book","1001","1000","","");
       }
       catch (Exception e){
         fail("exception was thrown");
       }
       try{
         Product book = new Book("123456","book","1001","2012","","");
       }
       catch (Exception e){
         fail("exception was thrown");
       }

     }

     //As far as testing for validity, only id year and price needs to be validated. The other values
     //(maker, publisher, author, description) can be left blank or can contain anything.
     //I assume author can be something like "william the 3rd" so any intergers and strings will be accepted

     @Test public void searchTest(){
       //In this test, I will add 3 books and 2 electronics. This will test my hashmap search for things like first item, last item, and something in the middle
       EStoreSearch testProgram = new EStoreSearch();
       ArrayList<Product> listofproducts = new ArrayList<Product>();
       HashMap <String,ArrayList<Integer>> hashString = new HashMap<String,ArrayList<Integer>>();
       SearchWindow search = new SearchWindow(listofproducts , hashString , "File");
       try{
        listofproducts.add(new Book ("000000", "Java PROgramING" ,"","2000","",""));
        listofproducts.add(new Book ("000001", "jAVA" ,"","2000","",""));
        listofproducts.add(new Book ("000002", "how to correctly PrOgram with Ryan Kelsey The great and powerful eBook for iphone" ,"","2000","",""));
        listofproducts.add(new Electronic ("000003", "IPOD touch" ,"40","2000","apple"));
        listofproducts.add(new Electronic ("000005", "IPhone" ,"40","2000","apple"));
       }
       catch (Exception e){
         fail("Exception was thrown for correct additions - exception was " +e.getMessage());
       }
       hashString = testProgram.initalizeHashMap(listofproducts);

       //Now we have a list of products. I will now search for 5 diffrent keywords
       //The first keyword is "java" this will yeild an array of [0,1]
       ArrayList<Integer> listofmatches = new ArrayList<Integer>();
       listofmatches.add(0);
       listofmatches.add(1);
       assertEquals(listofmatches ,search.hashSearch(listofproducts,"java" , hashString));
       //Now I will search for "java programming", which should return [0]
       listofmatches = new ArrayList<Integer>();
       listofmatches.add(0);
       assertEquals(listofmatches ,search.hashSearch(listofproducts,"java programing",hashString));
       //Now checking for something in a book, and an electronic. I will search for iphone, which should return [2,4]
       listofmatches = new ArrayList<Integer>();
       listofmatches.add(2);
       listofmatches.add(4);
       assertEquals(listofmatches ,search.hashSearch(listofproducts,"iphone",hashString));
       //now checking for "for iphone" which should include [2] but not [4]
       listofmatches = new ArrayList<Integer>();
       listofmatches.add(2);
       assertEquals(listofmatches ,search.hashSearch(listofproducts,"for iphone",hashString));
       //now i will check for serching something that doesnt exist. I will make a new empty arraylist and compare it to what is returned
       listofmatches = new ArrayList<Integer>();
       assertEquals(listofmatches, search.hashSearch(listofproducts, "Fei Song",hashString));
    }

    @Test public void fileTest(){
      EStoreSearch testProgram = new EStoreSearch();
      ArrayList<Product> listofproducts = new ArrayList<Product>();
      //we will test the loading of a file when the file does not exist.
      //Because I dont know the filename of the file the TA's will use to test my program, I cant make a test for correct file name
      assertEquals(-1 , testProgram.loadInfo(listofproducts , "This is a filename that has a very small chance to exist"));
      //now I will check the saving into a fileTest
      //because of the nature of printWriter, if it receives a wrong file name it will create that file then write to it,
      //so theres no way to check if a wrong filename was entered. Besides that I dont think there is any way to test
      //saving info to a file
    }
 }
